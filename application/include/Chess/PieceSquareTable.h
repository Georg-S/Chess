#pragma once
#include <iostream>

static void switch_x_and_y(int(&arr)[8][8])
{
	for (int y = 0; y < 8; y++)
	{
		for (int x = y + 1; x < 8; x++)
		{
			std::swap(arr[x][y], arr[y][x]);
		}
	}
}


static void flip_x(int(&arr)[8][8])
{
	for (int y = 0; y < 8; y++)
	{
		for (int left = 0, right = 8 - 1; left < right; left++, right--)
		{
			if (arr[left][y] != arr[right][y])
				std::swap(arr[left][y], arr[right][y]);
		}
	}
}

static void flip_y(int(&arr)[8][8])
{
	for (int x = 0; x < 8; x++)
	{
		for (int top = 0, bottom = 8 - 1; top < bottom; top++, bottom--)
		{

			if (arr[x][top] != arr[x][bottom])
				std::swap(arr[x][top], arr[x][bottom]);
		}
	}
}
static void copy(int(&destination)[8][8], const int(*source)[8])
{
	for (int x = 0; x < 8; x++)
	{
		for (int y = 0; y < 8; y++)
		{
			destination[x][y] = source[x][y];
		}
	}
}

static bool is_equal(const int(*arr1)[8], const int(*arr2)[8])
{
	for (int y = 0; y < 8; y++)
	{
		for (int x = 0; x < 8; x++)
		{
			if (arr1[x][y] != arr2[x][y])
				return false;
		}
	}
	return true;
}

static void print_values(const int(*arr)[8])
{
	for (int y = 0; y < 8; y++)
	{
		for (int x = 0; x < 8; x++)
		{
			std::cout << arr[x][y] << ", ";
		}
		std::cout << std::endl;
	}
}

constexpr int white_pawn_table[8][8] =
{
0, 50, 10, 5, 0, 5, 5, 0,
0, 50, 10, 5, 0, -5, 10, 0,
0, 50, 20, 10, 0, -10, 10, 0,
0, 50, 30, 25, 20, 0, -20, 0,
0, 50, 30, 25, 20, 0, -20, 0,
0, 50, 20, 10, 0, -10, 10, 0,
0, 50, 10, 5, 0, -5, 10, 0,
0, 50, 10, 5, 0, 5, 5, 0,
};

constexpr int black_pawn_table[8][8] =
{
0, 5, 5, 0, 5, 10, 50, 0,
0, 10, -5, 0, 5, 10, 50, 0,
0, 10, -10, 0, 10, 20, 50, 0,
0, -20, 0, 20, 25, 30, 50, 0,
0, -20, 0, 20, 25, 30, 50, 0,
0, 10, -10, 0, 10, 20, 50, 0,
0, 10, -5, 0, 5, 10, 50, 0,
0, 5, 5, 0, 5, 10, 50, 0,
};

constexpr int white_knight_table[8][8] =
{
-50, -40, -30, -30, -30, -30, -40, -50,
-40, -20, 0, 5, 0, 5, -20, -40,
-30, 0, 10, 15, 15, 10, 0, -30,
-30, 0, 15, 20, 20, 15, 5, -30,
-30, 0, 15, 20, 20, 15, 5, -30,
-30, 0, 10, 15, 15, 10, 0, -30,
-40, -20, 0, 5, 0, 5, -20, -40,
-50, -40, -30, -30, -30, -30, -40, -50,
};

constexpr int black_knight_table[8][8] =
{
-50, -40, -30, -30, -30, -30, -40, -50,
-40, -20, 5, 0, 5, 0, -20, -40,
-30, 0, 10, 15, 15, 10, 0, -30,
-30, 5, 15, 20, 20, 15, 0, -30,
-30, 5, 15, 20, 20, 15, 0, -30,
-30, 0, 10, 15, 15, 10, 0, -30,
-40, -20, 5, 0, 5, 0, -20, -40,
-50, -40, -30, -30, -30, -30, -40, -50,
};

constexpr int white_bishop_table[8][8] =
{
-20, -10, -10, -10, -10, -10, -10, -20,
-10, 0, 0, 5, 0, 10, 5, -10,
-10, 0, 5, 5, 10, 10, 0, -10,
-10, 0, 10, 10, 10, 10, 0, -10,
-10, 0, 10, 10, 10, 10, 0, -10,
-10, 0, 5, 5, 10, 10, 0, -10,
-10, 0, 0, 5, 0, 10, 5, -10,
-20, -10, -10, -10, -10, -10, -10, -20,
};

constexpr int black_bishop_table[8][8] =
{
-20, -10, -10, -10, -10, -10, -10, -20,
-10, 5, 10, 0, 5, 0, 0, -10,
-10, 0, 10, 10, 5, 5, 0, -10,
-10, 0, 10, 10, 10, 10, 0, -10,
-10, 0, 10, 10, 10, 10, 0, -10,
-10, 0, 10, 10, 5, 5, 0, -10,
-10, 5, 10, 0, 5, 0, 0, -10,
-20, -10, -10, -10, -10, -10, -10, -20,
};

constexpr int white_rook_table[8][8] =
{
0, 5, -5, -5, -5, -5, -5, 0,
0, 10, 0, 0, 0, 0, 0, 0,
0, 10, 0, 0, 0, 0, 0, 0,
0, 10, 0, 0, 0, 0, 0, 5,
0, 10, 0, 0, 0, 0, 0, 5,
0, 10, 0, 0, 0, 0, 0, 0,
0, 10, 0, 0, 0, 0, 0, 0,
0, 5, -5, -5, -5, -5, -5, 0,
};

constexpr int black_rook_table[8][8] =
{
0, -5, -5, -5, -5, -5, 5, 0,
0, 0, 0, 0, 0, 0, 10, 0,
0, 0, 0, 0, 0, 0, 10, 0,
5, 0, 0, 0, 0, 0, 10, 0,
5, 0, 0, 0, 0, 0, 10, 0,
0, 0, 0, 0, 0, 0, 10, 0,
0, 0, 0, 0, 0, 0, 10, 0,
0, -5, -5, -5, -5, -5, 5, 0,
};

constexpr int white_queen_table[8][8] =
{
-20, -10, -10, -5, 0, -10, -10, -20,
-10, 0, 0, 0, 0, 5, 0, -10,
-10, 0, 5, 5, 5, 5, 5, -10,
-5, 0, 5, 5, 5, 5, 0, -5,
-5, 0, 5, 5, 5, 5, 0, -5,
-10, 0, 5, 5, 5, 5, 0, -10,
-10, 0, 0, 0, 0, 0, 0, -10,
-20, -10, -10, -5, -5, -10, -10, -20,
};

constexpr int black_queen_table[8][8] =
{
-20, -10, -10, -5, -5, -10, -10, -20,
-10, 0, 0, 0, 0, 0, 0, -10,
-10, 0, 5, 5, 5, 5, 0, -10,
-5, 0, 5, 5, 5, 5, 0, -5,
-5, 0, 5, 5, 5, 5, 0, -5,
-10, 5, 5, 5, 5, 5, 0, -10,
-10, 0, 5, 0, 0, 0, 0, -10,
-20, -10, -10, 0, -5, -10, -10, -20,
};

constexpr int white_king_early_game_table[8][8] =
{
-30, -30, -30, -30, -20, -10, 20, 20,
-40, -40, -40, -40, -30, -20, 20, 30,
-40, -40, -40, -40, -30, -20, 0, 10,
-50, -50, -50, -50, -40, -20, 0, 0,
-50, -50, -50, -50, -40, -20, 0, 0,
-40, -40, -40, -40, -30, -20, 0, 10,
-40, -40, -40, -40, -30, -20, 20, 30,
-30, -30, -30, -30, -20, -10, 20, 20,
};

constexpr int black_king_early_game_table[8][8] =
{
20, 20, -10, -20, -30, -30, -30, -30,
30, 20, -20, -30, -40, -40, -40, -40,
10, 0, -20, -30, -40, -40, -40, -40,
0, 0, -20, -40, -50, -50, -50, -50,
0, 0, -20, -40, -50, -50, -50, -50,
10, 0, -20, -30, -40, -40, -40, -40,
30, 20, -20, -30, -40, -40, -40, -40,
20, 20, -10, -20, -30, -30, -30, -30,
};